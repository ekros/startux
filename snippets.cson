'.source.js':
  'Console dir':
    'prefix': 'dir'
    'body': 'console.dir($1);'

  'React proptypes':
    'prefix': 'rpt'
    'body': 'React.PropTypes.'
 
  'React class constructor':
    'prefix': 'rcon'
    'body': """
    constructor(props) {
      super(props);
      $1
    }
    """

  'Arrow function':
    'prefix': 'arr'
    'body': '() => {$1}'
 
  'Log a variable':
    'prefix': 'logvar'
    'body': """
    console.log("$1");
    console.log($1);
    """
        
  'React Stateless Component':
    'prefix': 'stateless'
    'body': """
    import React from 'react';
    import PropTypes from 'prop-types';

    const $1 = () => {
      return (
        <div></div>
      );
    \\};

    $1.propTypes = {
    \\};

    export default $1;
    
    """
    
  'React Component ES6':
    'prefix': 'recomp'
    'body': """
    import React from 'react';
    import PropTypes from 'prop-types';

    export default class $1 extends React.Component {
      render() {
        $2
        return (
          <div></div>
        );
      \\}
    \\}
    
    $1.propTypes = {
      $3
    \\};
      
    """

  'Destructuring this.state':
    'prefix': 'ts'
    'body': 'const { $1 } = this.state;'
  
  'Destructuring this.props':
    'prefix': 'tp'
    'body': 'const { $1 } = this.props;'

  'bind':
    'prefix': 'bin'
    'body': 'this.$1 = this.$1.bind(this);'

  'Performance measurement':
    'prefix': 'perf'
    'body': """
    // start meas here
    Perf.start();
    // stop meas here
    Perf.stop();
    const meas = Perf.getLastMeasurements();
    Perf.printInclusive(meas);
    console.log("wasted:");
    Perf.printWasted(meas);
    """
